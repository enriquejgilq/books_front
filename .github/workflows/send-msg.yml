name: EAS Build Preview and Notify Discord

on:
  push:
    tags:
      - 'preview'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      EAS_ACCESS_TOKEN: ${{ secrets.EAS_TOKEN }}
      EXPO_TOKEN: ${{ secrets.EAS_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Instalar EAS CLI
        run: npm install -g eas-cli
        
      - name: Verificar token de autenticaciÃ³n
        run: |
          echo "EAS_ACCESS_TOKEN: ${EAS_ACCESS_TOKEN::4}****"
          echo "EXPO_TOKEN: ${EXPO_TOKEN::4}****"

      - name: Ejecutar build preview
        run: eas build --platform android --profile preview --non-interactive

      - name: Obtener rama del tag
        id: branch
        run: |
          BRANCH=$(git name-rev --name-only $GITHUB_SHA | cut -d'~' -f1)
          echo "branch_name=$BRANCH" >> $GITHUB_OUTPUT

      - name: Esperar a que se genere el Ãºltimo build
        run: |
          echo "Esperando 60 segundos para asegurar que el build estÃ© listo..."
          sleep 60

      - name: Obtener enlace del Ãºltimo APK
        id: get_apk_url
        run: |
          npm install -g eas-cli jq
          BUILD_INFO=$(eas build:list --platform android --status finished --limit 1 --json)
          APK_URL=$(echo $BUILD_INFO | jq -r '.[0].artifacts.buildUrl')
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT

      - name: Enviar mensaje a Discord
        run: |
          curl -X POST -H "Content-Type: application/json" \
          -d '{
            "content": "**âœ… Nuevo build generado!**\nðŸ”§ Rama: '${{ steps.branch.outputs.branch_name }}'\nðŸ“¦ APK: '${{ steps.get_apk_url.outputs.apk_url }}'"
          }' $DISCORD_WEBHOOK_URL

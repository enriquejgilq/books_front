name: EAS Login Test

on:
  push:
    branches:
      - test-2
  pull_request:
    branches:
      - test-2

jobs:
  eas-login:
    runs-on: ubuntu-latest
    env:
      EAS_EMAIL: ${{ vars.EAS_USERNAME }}
      EAS_PASSWORD: ${{ vars.EAS_PASSWORD }}
      DISCORD_WEBHOOK_URL: ${{ vars.DISCORD_WEBHOOK_URL }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install eas-cli
        run: npm install -g eas-cli

      - name: Install expect
        run: sudo apt-get update && sudo apt-get install -y expect

      - name: EAS login using expect
        env:
          EAS_EMAIL: ${{ vars.EAS_USERNAME }}
          EAS_PASSWORD: ${{ vars.EAS_PASSWORD }}
        run: |
          expect <<EOF
          spawn eas login
          expect "Email address:"
          send "$EAS_EMAIL\r"
          expect "Password:"
          send "$EAS_PASSWORD\r"
          expect eof
          EOF

      - name: Check logged user
        run: eas whoami
      - name: Obtener última URL del APK
        id: get_apk_url
        run: |
          echo "📦 Obteniendo información del último build..."
          
          # Ejecutar el comando para obtener el último build
          BUILD_INFO=$(eas build:list --limit 1 --platform android --json --non-interactive)
          
          # Imprimir la salida del comando para depuración
          echo "🔍 Build Info: $BUILD_INFO"
          
          # Verificar si el resultado está vacío
          if [ -z "$BUILD_INFO" ]; then
            echo "❌ No se obtuvo información del build. Posible error en la autenticación o configuración del proyecto."
            exit 1
          fi
          
          # Verificar si la respuesta contiene un build válido
          BUILD_COUNT=$(echo "$BUILD_INFO" | jq length)
          if [ "$BUILD_COUNT" -eq 0 ]; then
            echo "❌ No se encontró ningún build."
            exit 1
          fi

          # Obtener la URL del APK
          APK_URL=$(echo "$BUILD_INFO" | jq -r '.[0].artifacts.buildUrl')

          # Verificar si se obtuvo una URL válida
          if [ -z "$APK_URL" ]; then
            echo "❌ No se encontró la URL del APK."
            exit 1
          fi

          echo "📦 APK URL: $APK_URL"

          # Guardar la URL del APK como salida de GitHub
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT


      - name: Notify Discord with APK URL
        run: |
          DISCORD_WEBHOOK_URL="https://discord.com/api/webhooks/1359492861376073849/UG5D1MUvgsO2cPYacgJX9md7S19nGOQ0W0cOov9IN7pcfyXW1KxJXjewK_EjWZm4FmBA"
          APK_URL="${{ steps.get_apk_url.outputs.apk_url }}"
          MESSAGE="🚀 Nuevo APK disponible para pruebas: $APK_URL"
          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"content\": \"$MESSAGE\"}"
name: Obtener URL del APK desde EAS

on:
  push:
    branches:
      - test-2  # Cambiar a la rama adecuada, por ejemplo, main

jobs:
  obtener-apk:
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout del repositorio
        uses: actions/checkout@v3

      - name: 📦 Instalar EAS CLI
        run: |
          npm install -g eas-cli
          eas --version  # Verificar la versión instalada de eas-cli para depuración

      - name: 🔐 Iniciar sesión en EAS
        run: |
          echo "Iniciando sesión con EAS..."
          eas login --non-interactive
        env:
          EAS_EMAIL: ${{ vars.EAS_EMAIL }}
          EAS_PASSWORD: ${{ vars.EAS_PASSWORD }}

      - name: 📋 Obtener última URL del APK
        id: get_apk_url
        run: |
          echo "📦 Obteniendo información del último build..."

          BUILD_INFO=$(eas build:list --limit 1 --platform android --json --non-interactive)

          echo "🔍 Build Info:"
          echo "$BUILD_INFO"  # Ver el contenido completo de la respuesta para depuración

          if [ -z "$BUILD_INFO" ] || [ "$(echo "$BUILD_INFO" | jq length)" -eq 0 ]; then
            echo "❌ No se encontró ningún build."
            exit 1
          fi

          APK_URL=$(echo "$BUILD_INFO" | jq -r '.[0].artifacts.buildUrl')

          if [ -z "$APK_URL" ]; then
            echo "❌ No se encontró la URL del APK."
            exit 1
          fi

          echo "📦 APK URL: $APK_URL"
          echo "apk_url=$APK_URL" >> $GITHUB_OUTPUT
        env:
          EAS_EMAIL: ${{ vars.EAS_EMAIL }}
          EAS_PASSWORD: ${{ vars.EAS_PASSWORD }}

      - name: 📤 Enviar URL a Discord
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": \"✅ APK disponible: ${{ steps.get_apk_url.outputs.apk_url }}\"}" \
            $DISCORD_WEBHOOK_URL
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
